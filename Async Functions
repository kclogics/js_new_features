+ CallBacks:   
  > A function supplied as a parameter to a function
  > The function will execute it when it's complete
  
+ Promises
  > Placeholder object of the eventual result
  > when resolved it makes the result available
  > Handles workflow
  > promise can have three states: Pending, Fulfilled, Rejected
  > Chainable
  > part of es2015 aka es6
               
  >>> Promise.all takes multiple promises and returns a promise which resolves when all supplied promises are done.
  
  >>> Promise.race works the same. it resolves when the first promise is done.

 + async
   > keyword to add to function declaration
   > Everything you return from that function will be wraped in a resolved promise
   > If you throw in the function the promise will return in the rejected state.
   
   
var return123 = async () => {
    return 123
}
 
console.log(return123());
VM24848:1 
Promise {<resolved>: 123}
__proto__: Promise
[[PromiseStatus]]: "resolved"
[[PromiseValue]]: 123
undefined
 
 
 
return123().then(result => {
    console.log(result)
})
VM25099:2 123
Promise {<resolved>: undefined}
__proto__: Promise
[[PromiseStatus]]: "resolved"
[[PromiseValue]]: undefined
